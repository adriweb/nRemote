import com.ti.et.education.commproxy.INodeID;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.dnd.*;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.Calendar;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @author Levak && Adriweb
 */
public class NspireKeyboard extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    private boolean Ctrl_state = false;
    private boolean Shift_state = false;
    private TrigFrame trigFrame = null;
    private ScreenFrame screenFrame = null;
    private PiFrame piFrame = null;
    private ConditionFrame conditionFrame = null;
    private SymbolsFrame symbolsFrame = null;
    private DeviceSelectionFrame deviceSelectionFrame = null;
    private boolean isRecording = false;
    private String currentSequence = "";

    public NspireKeyboard(boolean noScreenshots, boolean screenScan) {
        this.trigFrame = new TrigFrame();
        this.piFrame = new PiFrame();
        this.symbolsFrame = new SymbolsFrame();
        this.conditionFrame = new ConditionFrame();
        this.deviceSelectionFrame = new DeviceSelectionFrame(this);
        this.screenFrame = new ScreenFrame(screenScan);
        initComponents();
        STOP.setVisible(false);
        SCREEN.setIcon(new ImageIcon(Screen.generateLoadingScreen("LOADING ...")));
        this.noScreen.setSelected(noScreenshots);

        new DropTarget(this, new MyDragDropListener());
        ImageIcon icn = new ImageIcon(getClass().getResource("nremote.png"));
        this.setIconImage(icn.getImage());

        this.screenFrame.setVisible(true);
    }

    private class MyDragDropListener implements DropTargetListener {

        @Override
        public void drop(DropTargetDropEvent event) {
            // Accept copy drops
            event.acceptDrop(DnDConstants.ACTION_COPY);
            // Get the transfer which can provide the dropped item data
            Transferable transferable = event.getTransferable();
            // Get the data formats of the dropped item
            DataFlavor[] flavors = transferable.getTransferDataFlavors();
            // Loop through the flavors
            for (DataFlavor flavor : flavors) {
                try {
                    // If the drop items are files
                    if (flavor.isFlavorJavaFileListType()) {
                        // Get all of the dropped files
                        java.util.List<File> files = (java.util.List<File>) transferable.getTransferData(flavor);

                        for (File file : files) {
                            String destPath = file.getName() + (file.getName().endsWith(".tns") ? "" : ".tns");
                            if (ALL.isSelected()) {
                                for (INodeID nodeID : Remote.theCalcs) {
                                    Remote.sendFile(nodeID, file.getPath(), destPath);
                                }
                            } else {
                                for (INodeID nodeID : getSelectedDevices()) {
                                    Remote.sendFile(nodeID, file.getPath(), destPath);
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    System.out.println(e.getMessage());
                }
            }
            // Inform that the drop is complete
            event.dropComplete(true);
        }

        @Override
        public void dragEnter(DropTargetDragEvent dtde) {
        }

        @Override
        public void dragOver(DropTargetDragEvent dtde) {
        }

        @Override
        public void dropActionChanged(DropTargetDragEvent dtde) {
        }

        @Override
        public void dragExit(DropTargetEvent dte) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        device_selectmode_group = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        screen = new javax.swing.JPanel();
        SCREEN = new javax.swing.JLabel();
        top = new javax.swing.JPanel();
        top_right = new javax.swing.JPanel();
        ESC = new javax.swing.JButton();
        SCPD = new javax.swing.JButton();
        TAB = new javax.swing.JButton();
        jPanel8_void = new javax.swing.JPanel();
        left = new javax.swing.JPanel();
        jPanel4_void = new javax.swing.JPanel();
        LEFT = new javax.swing.JButton();
        jPanel3_void = new javax.swing.JPanel();
        Middle = new javax.swing.JPanel();
        UP = new javax.swing.JButton();
        CLIC = new javax.swing.JButton();
        DOWN = new javax.swing.JButton();
        right = new javax.swing.JPanel();
        jPanel5_void = new javax.swing.JPanel();
        RIGHT = new javax.swing.JButton();
        jPanel6_void = new javax.swing.JPanel();
        jPanel7_void = new javax.swing.JPanel();
        top_left = new javax.swing.JPanel();
        ON = new javax.swing.JButton();
        DOC = new javax.swing.JButton();
        MENU = new javax.swing.JButton();
        digit = new javax.swing.JPanel();
        left_side = new javax.swing.JPanel();
        ctrl = new javax.swing.JPanel();
        CTRL = new javax.swing.JButton();
        equal_trig = new javax.swing.JPanel();
        EQUAL = new javax.swing.JButton();
        TRIG = new javax.swing.JButton();
        pow_square = new javax.swing.JPanel();
        POW = new javax.swing.JButton();
        SQUARE = new javax.swing.JButton();
        exp_10pow = new javax.swing.JPanel();
        EXP = new javax.swing.JButton();
        POW10 = new javax.swing.JButton();
        parenthesis = new javax.swing.JPanel();
        OPEN_P = new javax.swing.JButton();
        CLOSE_P = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        middle_side = new javax.swing.JPanel();
        SHIFT = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        VAR = new javax.swing.JButton();
        NUM7 = new javax.swing.JButton();
        NUM8 = new javax.swing.JButton();
        NUM9 = new javax.swing.JButton();
        NUM4 = new javax.swing.JButton();
        NUM5 = new javax.swing.JButton();
        NUM6 = new javax.swing.JButton();
        NUM1 = new javax.swing.JButton();
        NUM2 = new javax.swing.JButton();
        NUM3 = new javax.swing.JButton();
        NUM0 = new javax.swing.JButton();
        NUM_POINT = new javax.swing.JButton();
        NUM_NEG = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        right_side = new javax.swing.JPanel();
        del = new javax.swing.JPanel();
        DEL = new javax.swing.JButton();
        tmpt_cat = new javax.swing.JPanel();
        TMPL = new javax.swing.JButton();
        CAT = new javax.swing.JButton();
        mult_div = new javax.swing.JPanel();
        MULT = new javax.swing.JButton();
        DIV = new javax.swing.JButton();
        plus_minus = new javax.swing.JPanel();
        PLUS = new javax.swing.JButton();
        MINUS = new javax.swing.JButton();
        ENTER = new javax.swing.JButton();
        alpha = new javax.swing.JPanel();
        ALPHA_EE = new javax.swing.JButton();
        ALPHA_A = new javax.swing.JButton();
        ALPHA_B = new javax.swing.JButton();
        ALPHA_C = new javax.swing.JButton();
        ALPHA_D = new javax.swing.JButton();
        ALPHA_E = new javax.swing.JButton();
        ALPHA_F = new javax.swing.JButton();
        ALPHA_G = new javax.swing.JButton();
        ALPHA_HELP = new javax.swing.JButton();
        ALPHA_PI = new javax.swing.JButton();
        ALPHA_H = new javax.swing.JButton();
        ALPHA_I = new javax.swing.JButton();
        ALPHA_J = new javax.swing.JButton();
        ALPHA_K = new javax.swing.JButton();
        ALPHA_L = new javax.swing.JButton();
        ALPHA_M = new javax.swing.JButton();
        ALPHA_N = new javax.swing.JButton();
        ALPHA_FLAG = new javax.swing.JButton();
        ALPHA_COMMA = new javax.swing.JButton();
        ALPHA_O = new javax.swing.JButton();
        ALPHA_P = new javax.swing.JButton();
        ALPHA_Q = new javax.swing.JButton();
        ALPHA_R = new javax.swing.JButton();
        ALPHA_S = new javax.swing.JButton();
        ALPHA_T = new javax.swing.JButton();
        ALPHA_U = new javax.swing.JButton();
        ALPHA_RETURN = new javax.swing.JButton();
        ALPHA_void = new javax.swing.JPanel();
        ALPHA_V = new javax.swing.JButton();
        ALPHA_W = new javax.swing.JButton();
        ALPHA_X = new javax.swing.JButton();
        ALPHA_Y = new javax.swing.JButton();
        ALPHA_Z = new javax.swing.JButton();
        ALPHA_SPACE = new javax.swing.JButton();
        bottom = new javax.swing.JPanel();
        options1 = new javax.swing.JPanel();
        DevicesRemoteMode = new javax.swing.JLabel();
        ALL = new javax.swing.JRadioButton();
        SELECTION = new javax.swing.JRadioButton();
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0), new java.awt.Dimension(0, 10));
        options0 = new javax.swing.JPanel();
        noScreen = new javax.swing.JCheckBox();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0), new java.awt.Dimension(0, 10));
        RECORD = new javax.swing.JButton();
        STOP = new javax.swing.JButton();
        LOAD = new javax.swing.JButton();
        tiplanet = new javax.swing.JLabel();

        SCREEN.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent e) {
                screenFrame.setVisible(true);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("nRemote");
        setBackground(new java.awt.Color(51, 51, 51));
        setMinimumSize(new java.awt.Dimension(335, 699));
        setPreferredSize(new java.awt.Dimension(335, 699));
        setResizable(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setFont(new java.awt.Font("TI-Nspire Sans", 0, 10)); // NOI18N

        screen.setBackground(new java.awt.Color(51, 51, 51));
        screen.setForeground(new java.awt.Color(255, 255, 255));
        screen.setFont(new java.awt.Font("TI-Nspire Sans", 0, 10)); // NOI18N
        screen.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        SCREEN.setBackground(new java.awt.Color(51, 51, 51));
        SCREEN.setFont(new java.awt.Font("TI-Nspire Sans", 0, 11)); // NOI18N
        SCREEN.setForeground(new java.awt.Color(255, 255, 255));
        SCREEN.setText(null);
        //SCREEN.setPreferredSize(new java.awt.Dimension(320, 240));
        screen.add(SCREEN);

        top.setBackground(new java.awt.Color(51, 51, 51));
        top.setForeground(new java.awt.Color(51, 51, 51));
        top.setLayout(new javax.swing.BoxLayout(top, javax.swing.BoxLayout.LINE_AXIS));

        top_right.setBackground(new java.awt.Color(51, 51, 51));
        top_right.setForeground(new java.awt.Color(51, 51, 51));
        top_right.setMinimumSize(new java.awt.Dimension(48, 85));
        top_right.setPreferredSize(new java.awt.Dimension(48, 85));
        top_right.setLayout(new java.awt.GridLayout(3, 1));

        ESC.setBackground(new java.awt.Color(51, 51, 51));
        ESC.setFont(new java.awt.Font("TI-Nspire Sans", 0, 14)); // NOI18N
        ESC.setForeground(new java.awt.Color(255, 255, 255));
        ESC.setText("esc");
        ESC.setFocusable(false);
        ESC.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ESCActionPerformed(evt);
            }
        });
        ESC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        top_right.add(ESC);

        SCPD.setBackground(new java.awt.Color(51, 51, 51));
        SCPD.setFont(new java.awt.Font("TI-Nspire Sans", 0, 18)); // NOI18N
        SCPD.setForeground(new java.awt.Color(255, 255, 255));
        SCPD.setText("");
        SCPD.setFocusable(false);
        SCPD.setMargin(new java.awt.Insets(2, -10, 2, -10));
        SCPD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SCPDActionPerformed(evt);
            }
        });
        SCPD.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        top_right.add(SCPD);

        TAB.setBackground(new java.awt.Color(51, 51, 51));
        TAB.setFont(new java.awt.Font("TI-Nspire Sans", 0, 14)); // NOI18N
        TAB.setForeground(new java.awt.Color(255, 255, 255));
        TAB.setText("tab");
        TAB.setFocusable(false);
        TAB.setMargin(new java.awt.Insets(2, -10, 2, -10));
        TAB.setMaximumSize(new java.awt.Dimension(57, 23));
        TAB.setMinimumSize(new java.awt.Dimension(57, 23));
        TAB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TABActionPerformed(evt);
            }
        });
        TAB.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        top_right.add(TAB);

        top.add(top_right);

        jPanel8_void.setBackground(new java.awt.Color(51, 51, 51));
        jPanel8_void.setForeground(new java.awt.Color(51, 51, 51));
        jPanel8_void.setMinimumSize(new java.awt.Dimension(40, 85));
        jPanel8_void.setPreferredSize(new java.awt.Dimension(40, 85));

        javax.swing.GroupLayout jPanel8_voidLayout = new javax.swing.GroupLayout(jPanel8_void);
        jPanel8_void.setLayout(jPanel8_voidLayout);
        jPanel8_voidLayout.setHorizontalGroup(
                jPanel8_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 40, Short.MAX_VALUE)
        );
        jPanel8_voidLayout.setVerticalGroup(
                jPanel8_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 102, Short.MAX_VALUE)
        );

        top.add(jPanel8_void);

        left.setBackground(new java.awt.Color(51, 51, 51));
        left.setMinimumSize(new java.awt.Dimension(48, 85));
        left.setPreferredSize(new java.awt.Dimension(48, 85));
        left.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        left.setLayout(new java.awt.GridLayout(3, 1));

        jPanel4_void.setBackground(new java.awt.Color(51, 51, 51));
        jPanel4_void.setForeground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel4_voidLayout = new javax.swing.GroupLayout(jPanel4_void);
        jPanel4_void.setLayout(jPanel4_voidLayout);
        jPanel4_voidLayout.setHorizontalGroup(
                jPanel4_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 48, Short.MAX_VALUE)
        );
        jPanel4_voidLayout.setVerticalGroup(
                jPanel4_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 34, Short.MAX_VALUE)
        );

        left.add(jPanel4_void);

        LEFT.setBackground(new java.awt.Color(51, 51, 51));
        LEFT.setFont(new java.awt.Font("TI-Nspire Sans", 0, 24)); // NOI18N
        LEFT.setForeground(new java.awt.Color(255, 255, 255));
        LEFT.setText("◂");
        LEFT.setFocusable(false);
        LEFT.setMargin(new java.awt.Insets(2, -10, 2, -10));
        LEFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LEFTActionPerformed(evt);
            }
        });
        LEFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        left.add(LEFT);

        jPanel3_void.setBackground(new java.awt.Color(51, 51, 51));
        jPanel3_void.setForeground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel3_voidLayout = new javax.swing.GroupLayout(jPanel3_void);
        jPanel3_void.setLayout(jPanel3_voidLayout);
        jPanel3_voidLayout.setHorizontalGroup(
                jPanel3_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 48, Short.MAX_VALUE)
        );
        jPanel3_voidLayout.setVerticalGroup(
                jPanel3_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 34, Short.MAX_VALUE)
        );

        left.add(jPanel3_void);

        top.add(left);

        Middle.setBackground(new java.awt.Color(51, 51, 51));
        Middle.setMinimumSize(new java.awt.Dimension(48, 85));
        Middle.setPreferredSize(new java.awt.Dimension(48, 85));
        Middle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        Middle.setLayout(new java.awt.GridLayout(3, 0));

        UP.setBackground(new java.awt.Color(51, 51, 51));
        UP.setFont(new java.awt.Font("TI-Nspire Sans", 0, 24)); // NOI18N
        UP.setForeground(new java.awt.Color(255, 255, 255));
        UP.setText("▴");
        UP.setFocusable(false);
        UP.setMargin(new java.awt.Insets(2, -10, 2, -10));
        UP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPActionPerformed(evt);
            }
        });
        UP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        Middle.add(UP);

        CLIC.setBackground(new java.awt.Color(51, 51, 51));
        CLIC.setFont(new java.awt.Font("TI-Nspire Sans", 0, 24)); // NOI18N
        CLIC.setForeground(new java.awt.Color(255, 255, 255));
        CLIC.setText("");
        CLIC.setFocusable(false);
        CLIC.setMargin(new java.awt.Insets(2, -10, 2, -10));
        CLIC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CLICActionPerformed(evt);
            }
        });
        CLIC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        Middle.add(CLIC);

        DOWN.setBackground(new java.awt.Color(51, 51, 51));
        DOWN.setFont(new java.awt.Font("TI-Nspire Sans", 0, 24)); // NOI18N
        DOWN.setForeground(new java.awt.Color(255, 255, 255));
        DOWN.setText("▾");
        DOWN.setFocusable(false);
        DOWN.setMargin(new java.awt.Insets(2, -10, 2, -10));
        DOWN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DOWNActionPerformed(evt);
            }
        });
        DOWN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        Middle.add(DOWN);

        top.add(Middle);

        right.setBackground(new java.awt.Color(51, 51, 51));
        right.setMinimumSize(new java.awt.Dimension(48, 85));
        right.setPreferredSize(new java.awt.Dimension(48, 85));
        right.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        right.setLayout(new java.awt.GridLayout(3, 1));

        jPanel5_void.setBackground(new java.awt.Color(51, 51, 51));
        jPanel5_void.setForeground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel5_voidLayout = new javax.swing.GroupLayout(jPanel5_void);
        jPanel5_void.setLayout(jPanel5_voidLayout);
        jPanel5_voidLayout.setHorizontalGroup(
                jPanel5_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 48, Short.MAX_VALUE)
        );
        jPanel5_voidLayout.setVerticalGroup(
                jPanel5_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 34, Short.MAX_VALUE)
        );

        right.add(jPanel5_void);

        RIGHT.setBackground(new java.awt.Color(51, 51, 51));
        RIGHT.setFont(new java.awt.Font("TI-Nspire Sans", 0, 24)); // NOI18N
        RIGHT.setForeground(new java.awt.Color(255, 255, 255));
        RIGHT.setText("▸");
        RIGHT.setFocusable(false);
        RIGHT.setMargin(new java.awt.Insets(2, -10, 2, -10));
        RIGHT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RIGHTActionPerformed(evt);
            }
        });
        RIGHT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        right.add(RIGHT);

        jPanel6_void.setBackground(new java.awt.Color(51, 51, 51));
        jPanel6_void.setForeground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel6_voidLayout = new javax.swing.GroupLayout(jPanel6_void);
        jPanel6_void.setLayout(jPanel6_voidLayout);
        jPanel6_voidLayout.setHorizontalGroup(
                jPanel6_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 48, Short.MAX_VALUE)
        );
        jPanel6_voidLayout.setVerticalGroup(
                jPanel6_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 34, Short.MAX_VALUE)
        );

        right.add(jPanel6_void);

        top.add(right);

        jPanel7_void.setBackground(new java.awt.Color(51, 51, 51));
        jPanel7_void.setForeground(new java.awt.Color(51, 51, 51));
        jPanel7_void.setMinimumSize(new java.awt.Dimension(40, 85));
        jPanel7_void.setPreferredSize(new java.awt.Dimension(40, 85));

        javax.swing.GroupLayout jPanel7_voidLayout = new javax.swing.GroupLayout(jPanel7_void);
        jPanel7_void.setLayout(jPanel7_voidLayout);
        jPanel7_voidLayout.setHorizontalGroup(
                jPanel7_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 40, Short.MAX_VALUE)
        );
        jPanel7_voidLayout.setVerticalGroup(
                jPanel7_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 102, Short.MAX_VALUE)
        );

        top.add(jPanel7_void);

        top_left.setBackground(new java.awt.Color(51, 51, 51));
        top_left.setForeground(new java.awt.Color(51, 51, 51));
        top_left.setMinimumSize(new java.awt.Dimension(48, 85));
        top_left.setPreferredSize(new java.awt.Dimension(48, 85));
        top_left.setLayout(new java.awt.GridLayout(3, 1));

        ON.setBackground(new java.awt.Color(51, 51, 51));
        ON.setFont(new java.awt.Font("TI-Nspire Sans", 0, 14)); // NOI18N
        ON.setForeground(new java.awt.Color(255, 255, 255));
        ON.setText(" on");
        ON.setFocusable(false);
        ON.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ONActionPerformed(evt);
            }
        });
        ON.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        top_left.add(ON);

        DOC.setBackground(new java.awt.Color(51, 51, 51));
        DOC.setFont(new java.awt.Font("TI-Nspire Sans", 0, 14)); // NOI18N
        DOC.setForeground(new java.awt.Color(255, 255, 255));
        DOC.setText("doc ▾");
        DOC.setFocusable(false);
        DOC.setMargin(new java.awt.Insets(2, -10, 2, -10));
        DOC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DOCActionPerformed(evt);
            }
        });
        DOC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        top_left.add(DOC);

        MENU.setBackground(new java.awt.Color(51, 51, 51));
        MENU.setFont(new java.awt.Font("TI-Nspire Sans", 0, 14)); // NOI18N
        MENU.setForeground(new java.awt.Color(255, 255, 255));
        MENU.setText("menu");
        MENU.setFocusable(false);
        MENU.setMargin(new java.awt.Insets(2, -10, 2, -10));
        MENU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MENUActionPerformed(evt);
            }
        });
        MENU.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        top_left.add(MENU);

        top.add(top_left);

        digit.setBackground(new java.awt.Color(51, 51, 51));
        digit.setFont(new java.awt.Font("TI-Nspire Sans", 0, 10)); // NOI18N
        digit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        digit.setLayout(new javax.swing.BoxLayout(digit, javax.swing.BoxLayout.X_AXIS));

        left_side.setBackground(new java.awt.Color(51, 51, 51));
        left_side.setMinimumSize(new java.awt.Dimension(60, 145));
        left_side.setPreferredSize(new java.awt.Dimension(60, 145));
        left_side.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        left_side.setLayout(new java.awt.GridLayout(5, 0, 5, 5));

        ctrl.setBackground(new java.awt.Color(51, 51, 51));
        ctrl.setMinimumSize(new java.awt.Dimension(50, 85));
        ctrl.setName(""); // NOI18N
        ctrl.setPreferredSize(new java.awt.Dimension(50, 85));
        ctrl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });

        CTRL.setBackground(new java.awt.Color(204, 255, 255));
        CTRL.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        CTRL.setText("ctrl");
        CTRL.setFocusable(false);
        CTRL.setMargin(new java.awt.Insets(2, -10, 2, -10));
        CTRL.setMaximumSize(new java.awt.Dimension(60, 25));
        CTRL.setMinimumSize(new java.awt.Dimension(60, 25));
        CTRL.setPreferredSize(new java.awt.Dimension(60, 25));
        CTRL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CTRLActionPerformed(evt);
            }
        });
        CTRL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout ctrlLayout = new javax.swing.GroupLayout(ctrl);
        ctrl.setLayout(ctrlLayout);
        ctrlLayout.setHorizontalGroup(
                ctrlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(ctrlLayout.createSequentialGroup()
                                .addComponent(CTRL, javax.swing.GroupLayout.PREFERRED_SIZE, 46, Short.MAX_VALUE)
                                .addContainerGap(30, Short.MAX_VALUE))
        );
        ctrlLayout.setVerticalGroup(
                ctrlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(CTRL, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
        );

        left_side.add(ctrl);

        equal_trig.setBackground(new java.awt.Color(51, 51, 51));
        equal_trig.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        equal_trig.setLayout(new java.awt.GridLayout(0, 2));

        EQUAL.setBackground(new java.awt.Color(51, 51, 51));
        EQUAL.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        EQUAL.setForeground(new java.awt.Color(255, 255, 255));
        EQUAL.setText("=");
        EQUAL.setFocusable(false);
        EQUAL.setMargin(new java.awt.Insets(2, -10, 2, -10));
        EQUAL.setPreferredSize(new java.awt.Dimension(40, 23));
        EQUAL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EQUALActionPerformed(evt);
            }
        });
        EQUAL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        equal_trig.add(EQUAL);

        TRIG.setBackground(new java.awt.Color(51, 51, 51));
        TRIG.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        TRIG.setForeground(new java.awt.Color(255, 255, 255));
        TRIG.setText("trig");
        TRIG.setFocusable(false);
        TRIG.setMargin(new java.awt.Insets(2, -10, 2, -10));
        TRIG.setPreferredSize(new java.awt.Dimension(40, 23));
        TRIG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TRIGActionPerformed(evt);
            }
        });
        TRIG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        equal_trig.add(TRIG);

        left_side.add(equal_trig);

        pow_square.setBackground(new java.awt.Color(51, 51, 51));
        pow_square.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        pow_square.setLayout(new java.awt.GridLayout(0, 2));

        POW.setBackground(new java.awt.Color(51, 51, 51));
        POW.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        POW.setForeground(new java.awt.Color(255, 255, 255));
        POW.setText("^");
        POW.setFocusable(false);
        POW.setMargin(new java.awt.Insets(2, -10, 2, -10));
        POW.setPreferredSize(new java.awt.Dimension(40, 23));
        POW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        POW.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        pow_square.add(POW);

        SQUARE.setBackground(new java.awt.Color(51, 51, 51));
        SQUARE.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        SQUARE.setForeground(new java.awt.Color(255, 255, 255));
        SQUARE.setText("<html>x<sup>2</sup></html>");
        SQUARE.setFocusable(false);
        SQUARE.setMargin(new java.awt.Insets(2, -10, 2, -10));
        SQUARE.setPreferredSize(new java.awt.Dimension(40, 23));
        SQUARE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SQUAREActionPerformed(evt);
            }
        });
        SQUARE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        pow_square.add(SQUARE);

        left_side.add(pow_square);

        exp_10pow.setBackground(new java.awt.Color(51, 51, 51));
        exp_10pow.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        exp_10pow.setLayout(new java.awt.GridLayout(0, 2));

        EXP.setBackground(new java.awt.Color(51, 51, 51));
        EXP.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        EXP.setForeground(new java.awt.Color(255, 255, 255));
        EXP.setText("<html>e<sup>x</sup></html>");
        EXP.setFocusable(false);
        EXP.setMargin(new java.awt.Insets(2, -10, 2, -10));
        EXP.setPreferredSize(new java.awt.Dimension(40, 23));
        EXP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EXPActionPerformed(evt);
            }
        });
        EXP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        exp_10pow.add(EXP);

        POW10.setBackground(new java.awt.Color(51, 51, 51));
        POW10.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        POW10.setForeground(new java.awt.Color(255, 255, 255));
        POW10.setText("<html>10<sup>x</sup></html>");
        POW10.setFocusable(false);
        POW10.setMargin(new java.awt.Insets(2, -10, 2, -10));
        POW10.setPreferredSize(new java.awt.Dimension(40, 23));
        POW10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                POW10ActionPerformed(evt);
            }
        });
        POW10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        exp_10pow.add(POW10);

        left_side.add(exp_10pow);

        parenthesis.setBackground(new java.awt.Color(51, 51, 51));
        parenthesis.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        parenthesis.setLayout(new java.awt.GridLayout(0, 2));

        OPEN_P.setBackground(new java.awt.Color(51, 51, 51));
        OPEN_P.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        OPEN_P.setForeground(new java.awt.Color(255, 255, 255));
        OPEN_P.setText("(");
        OPEN_P.setFocusable(false);
        OPEN_P.setMargin(new java.awt.Insets(2, -10, 2, -10));
        OPEN_P.setPreferredSize(new java.awt.Dimension(40, 23));
        OPEN_P.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        OPEN_P.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        parenthesis.add(OPEN_P);

        CLOSE_P.setBackground(new java.awt.Color(51, 51, 51));
        CLOSE_P.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        CLOSE_P.setForeground(new java.awt.Color(255, 255, 255));
        CLOSE_P.setText(")");
        CLOSE_P.setFocusable(false);
        CLOSE_P.setMargin(new java.awt.Insets(2, -10, 2, -10));
        CLOSE_P.setPreferredSize(new java.awt.Dimension(40, 23));
        CLOSE_P.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        CLOSE_P.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        parenthesis.add(CLOSE_P);

        left_side.add(parenthesis);

        digit.add(left_side);
        digit.add(filler2);

        middle_side.setBackground(new java.awt.Color(51, 51, 51));
        middle_side.setPreferredSize(new java.awt.Dimension(130, 70));
        middle_side.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.setLayout(new java.awt.GridLayout(5, 3, 5, 5));

        SHIFT.setBackground(new java.awt.Color(51, 51, 51));
        SHIFT.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        SHIFT.setForeground(new java.awt.Color(255, 255, 255));
        SHIFT.setText("⇧ shift");
        SHIFT.setFocusable(false);
        SHIFT.setMargin(new java.awt.Insets(2, -10, 2, -10));
        SHIFT.setMinimumSize(new java.awt.Dimension(35, 20));
        SHIFT.setPreferredSize(new java.awt.Dimension(30, 10));
        SHIFT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SHIFTActionPerformed(evt);
            }
        });
        SHIFT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(SHIFT);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setFocusable(false);
        jPanel1.setMinimumSize(new java.awt.Dimension(35, 20));
        jPanel1.setPreferredSize(new java.awt.Dimension(30, 10));
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 45, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 27, Short.MAX_VALUE)
        );

        middle_side.add(jPanel1);

        VAR.setBackground(new java.awt.Color(51, 51, 51));
        VAR.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        VAR.setForeground(new java.awt.Color(255, 255, 255));
        VAR.setText("var");
        VAR.setFocusable(false);
        VAR.setMargin(new java.awt.Insets(2, -10, 2, -10));
        VAR.setMinimumSize(new java.awt.Dimension(35, 20));
        VAR.setPreferredSize(new java.awt.Dimension(30, 10));
        VAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VARActionPerformed(evt);
            }
        });
        VAR.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(VAR);

        NUM7.setBackground(new java.awt.Color(102, 102, 102));
        NUM7.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM7.setForeground(new java.awt.Color(255, 255, 255));
        NUM7.setText("7");
        NUM7.setFocusable(false);
        NUM7.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM7.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM7.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM7);

        NUM8.setBackground(new java.awt.Color(102, 102, 102));
        NUM8.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM8.setForeground(new java.awt.Color(255, 255, 255));
        NUM8.setText("8");
        NUM8.setFocusable(false);
        NUM8.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM8.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM8.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM8);

        NUM9.setBackground(new java.awt.Color(102, 102, 102));
        NUM9.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM9.setForeground(new java.awt.Color(255, 255, 255));
        NUM9.setText("9");
        NUM9.setFocusable(false);
        NUM9.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM9.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM9.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM9);

        NUM4.setBackground(new java.awt.Color(102, 102, 102));
        NUM4.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM4.setForeground(new java.awt.Color(255, 255, 255));
        NUM4.setText("4");
        NUM4.setFocusable(false);
        NUM4.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM4.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM4.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM4);

        NUM5.setBackground(new java.awt.Color(102, 102, 102));
        NUM5.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM5.setForeground(new java.awt.Color(255, 255, 255));
        NUM5.setText("5");
        NUM5.setFocusable(false);
        NUM5.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM5.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM5.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM5);

        NUM6.setBackground(new java.awt.Color(102, 102, 102));
        NUM6.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM6.setForeground(new java.awt.Color(255, 255, 255));
        NUM6.setText("6");
        NUM6.setFocusable(false);
        NUM6.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM6.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM6.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM6);

        NUM1.setBackground(new java.awt.Color(102, 102, 102));
        NUM1.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM1.setForeground(new java.awt.Color(255, 255, 255));
        NUM1.setText("1");
        NUM1.setFocusable(false);
        NUM1.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM1.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM1.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM1);

        NUM2.setBackground(new java.awt.Color(102, 102, 102));
        NUM2.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM2.setForeground(new java.awt.Color(255, 255, 255));
        NUM2.setText("2");
        NUM2.setFocusable(false);
        NUM2.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM2.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM2.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM2);

        NUM3.setBackground(new java.awt.Color(102, 102, 102));
        NUM3.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM3.setForeground(new java.awt.Color(255, 255, 255));
        NUM3.setText("3");
        NUM3.setFocusable(false);
        NUM3.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM3.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM3.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM3);

        NUM0.setBackground(new java.awt.Color(102, 102, 102));
        NUM0.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM0.setForeground(new java.awt.Color(255, 255, 255));
        NUM0.setText("0");
        NUM0.setFocusable(false);
        NUM0.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM0.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM0.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM0.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM0);

        NUM_POINT.setBackground(new java.awt.Color(102, 102, 102));
        NUM_POINT.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM_POINT.setForeground(new java.awt.Color(255, 255, 255));
        NUM_POINT.setText(".");
        NUM_POINT.setFocusable(false);
        NUM_POINT.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM_POINT.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM_POINT.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM_POINT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        NUM_POINT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM_POINT);

        NUM_NEG.setBackground(new java.awt.Color(102, 102, 102));
        NUM_NEG.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        NUM_NEG.setForeground(new java.awt.Color(255, 255, 255));
        NUM_NEG.setText("(-)");
        NUM_NEG.setFocusable(false);
        NUM_NEG.setMargin(new java.awt.Insets(2, -10, 2, -10));
        NUM_NEG.setMinimumSize(new java.awt.Dimension(35, 20));
        NUM_NEG.setPreferredSize(new java.awt.Dimension(30, 10));
        NUM_NEG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NUM_NEGActionPerformed(evt);
            }
        });
        NUM_NEG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        middle_side.add(NUM_NEG);

        digit.add(middle_side);
        digit.add(filler3);

        right_side.setBackground(new java.awt.Color(51, 51, 51));
        right_side.setMinimumSize(new java.awt.Dimension(60, 145));
        right_side.setPreferredSize(new java.awt.Dimension(60, 145));
        right_side.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        right_side.setLayout(new java.awt.GridLayout(5, 0, 0, 5));

        del.setBackground(new java.awt.Color(51, 51, 51));
        del.setMinimumSize(new java.awt.Dimension(50, 85));
        del.setPreferredSize(new java.awt.Dimension(50, 85));
        del.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });

        DEL.setBackground(new java.awt.Color(51, 51, 51));
        DEL.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        DEL.setForeground(new java.awt.Color(255, 255, 255));
        DEL.setText("del");
        DEL.setFocusable(false);
        DEL.setMargin(new java.awt.Insets(2, -10, 2, -10));
        DEL.setMaximumSize(new java.awt.Dimension(60, 25));
        DEL.setMinimumSize(new java.awt.Dimension(60, 25));
        DEL.setPreferredSize(new java.awt.Dimension(60, 25));
        DEL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELActionPerformed(evt);
            }
        });
        DEL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout delLayout = new javax.swing.GroupLayout(del);
        del.setLayout(delLayout);
        delLayout.setHorizontalGroup(
                delLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, delLayout.createSequentialGroup()
                                .addContainerGap(30, Short.MAX_VALUE)
                                .addComponent(DEL, javax.swing.GroupLayout.PREFERRED_SIZE, 46, Short.MAX_VALUE))
        );
        delLayout.setVerticalGroup(
                delLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(DEL, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
        );

        right_side.add(del);

        tmpt_cat.setBackground(new java.awt.Color(51, 51, 51));
        tmpt_cat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        tmpt_cat.setLayout(new java.awt.GridLayout(0, 2));

        TMPL.setBackground(new java.awt.Color(51, 51, 51));
        TMPL.setFont(new java.awt.Font("TI-Nspire Sans", 0, 18)); // NOI18N
        TMPL.setForeground(new java.awt.Color(255, 255, 255));
        TMPL.setText("");
        TMPL.setFocusable(false);
        TMPL.setMargin(new java.awt.Insets(2, -10, 2, -10));
        TMPL.setPreferredSize(new java.awt.Dimension(40, 23));
        TMPL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TMPLActionPerformed(evt);
            }
        });
        TMPL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        tmpt_cat.add(TMPL);

        CAT.setBackground(new java.awt.Color(51, 51, 51));
        CAT.setFont(new java.awt.Font("TI-Nspire Sans", 0, 18)); // NOI18N
        CAT.setForeground(new java.awt.Color(255, 255, 255));
        CAT.setText("");
        CAT.setFocusable(false);
        CAT.setMargin(new java.awt.Insets(2, -10, 2, -10));
        CAT.setPreferredSize(new java.awt.Dimension(40, 23));
        CAT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CATActionPerformed(evt);
            }
        });
        CAT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        tmpt_cat.add(CAT);

        right_side.add(tmpt_cat);

        mult_div.setBackground(new java.awt.Color(51, 51, 51));
        mult_div.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        mult_div.setLayout(new java.awt.GridLayout(0, 2));

        MULT.setBackground(new java.awt.Color(51, 51, 51));
        MULT.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        MULT.setForeground(new java.awt.Color(255, 255, 255));
        MULT.setText("×");
        MULT.setFocusable(false);
        MULT.setMargin(new java.awt.Insets(2, -10, 2, -10));
        MULT.setPreferredSize(new java.awt.Dimension(40, 23));
        MULT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MULTActionPerformed(evt);
            }
        });
        MULT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        mult_div.add(MULT);

        DIV.setBackground(new java.awt.Color(51, 51, 51));
        DIV.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        DIV.setForeground(new java.awt.Color(255, 255, 255));
        DIV.setText("÷");
        DIV.setFocusable(false);
        DIV.setMargin(new java.awt.Insets(2, -10, 2, -10));
        DIV.setPreferredSize(new java.awt.Dimension(40, 23));
        DIV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DIVActionPerformed(evt);
            }
        });
        DIV.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        mult_div.add(DIV);

        right_side.add(mult_div);

        plus_minus.setBackground(new java.awt.Color(51, 51, 51));
        plus_minus.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        plus_minus.setLayout(new java.awt.GridLayout(0, 2));

        PLUS.setBackground(new java.awt.Color(51, 51, 51));
        PLUS.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        PLUS.setForeground(new java.awt.Color(255, 255, 255));
        PLUS.setText("+");
        PLUS.setFocusable(false);
        PLUS.setMargin(new java.awt.Insets(2, -10, 2, -10));
        PLUS.setPreferredSize(new java.awt.Dimension(40, 23));
        PLUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        PLUS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        plus_minus.add(PLUS);

        MINUS.setBackground(new java.awt.Color(51, 51, 51));
        MINUS.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        MINUS.setForeground(new java.awt.Color(255, 255, 255));
        MINUS.setText("-");
        MINUS.setFocusable(false);
        MINUS.setMargin(new java.awt.Insets(2, -10, 2, -10));
        MINUS.setPreferredSize(new java.awt.Dimension(40, 23));
        MINUS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelf(evt);
            }
        });
        MINUS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        plus_minus.add(MINUS);

        right_side.add(plus_minus);

        ENTER.setBackground(new java.awt.Color(51, 51, 51));
        ENTER.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ENTER.setForeground(new java.awt.Color(255, 255, 255));
        ENTER.setText("ENTER");
        ENTER.setFocusable(false);
        ENTER.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ENTER.setPreferredSize(new java.awt.Dimension(80, 23));
        ENTER.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ENTERActionPerformed(evt);
            }
        });
        ENTER.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        right_side.add(ENTER);

        digit.add(right_side);

        alpha.setBackground(new java.awt.Color(51, 51, 51));
        alpha.setForeground(new java.awt.Color(255, 255, 255));
        alpha.setFont(new java.awt.Font("TI-Nspire Sans", 0, 10)); // NOI18N
        alpha.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.setLayout(new java.awt.GridLayout(4, 9, 10, 5));

        ALPHA_EE.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_EE.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_EE.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_EE.setText("EE");
        ALPHA_EE.setFocusable(false);
        ALPHA_EE.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_EE.setMinimumSize(new java.awt.Dimension(25, 20));
        ALPHA_EE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALPHA_EEActionPerformed(evt);
            }
        });
        ALPHA_EE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_EE);

        ALPHA_A.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_A.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_A.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_A.setText("A");
        ALPHA_A.setFocusable(false);
        ALPHA_A.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_A.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_A.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_A.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_A);

        ALPHA_B.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_B.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_B.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_B.setText("B");
        ALPHA_B.setFocusable(false);
        ALPHA_B.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_B.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_B.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_B.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_B);

        ALPHA_C.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_C.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_C.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_C.setText("C");
        ALPHA_C.setFocusable(false);
        ALPHA_C.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_C.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_C.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_C.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_C);

        ALPHA_D.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_D.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_D.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_D.setText("D");
        ALPHA_D.setFocusable(false);
        ALPHA_D.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_D.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_D.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_D.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_D.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_D);

        ALPHA_E.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_E.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_E.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_E.setText("E");
        ALPHA_E.setFocusable(false);
        ALPHA_E.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_E.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_E.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_E.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_E.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_E);

        ALPHA_F.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_F.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_F.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_F.setText("F");
        ALPHA_F.setFocusable(false);
        ALPHA_F.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_F.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_F.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_F.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_F.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_F);

        ALPHA_G.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_G.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_G.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_G.setText("G");
        ALPHA_G.setFocusable(false);
        ALPHA_G.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_G.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_G.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_G.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_G.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_G);

        ALPHA_HELP.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_HELP.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_HELP.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_HELP.setText("?!▸");
        ALPHA_HELP.setFocusable(false);
        ALPHA_HELP.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_HELP.setMinimumSize(new java.awt.Dimension(25, 20));
        ALPHA_HELP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALPHA_HELPActionPerformed(evt);
            }
        });
        ALPHA_HELP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_HELP);

        ALPHA_PI.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_PI.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_PI.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_PI.setText("π▸");
        ALPHA_PI.setFocusable(false);
        ALPHA_PI.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_PI.setMinimumSize(new java.awt.Dimension(25, 20));
        ALPHA_PI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALPHA_PIActionPerformed(evt);
            }
        });
        ALPHA_PI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_PI);

        ALPHA_H.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_H.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_H.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_H.setText("H");
        ALPHA_H.setFocusable(false);
        ALPHA_H.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_H.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_H.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_H.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_H.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_H);

        ALPHA_I.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_I.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_I.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_I.setText("I");
        ALPHA_I.setFocusable(false);
        ALPHA_I.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_I.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_I.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_I.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_I.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_I);

        ALPHA_J.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_J.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_J.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_J.setText("J");
        ALPHA_J.setFocusable(false);
        ALPHA_J.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_J.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_J.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_J.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_J.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_J);

        ALPHA_K.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_K.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_K.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_K.setText("K");
        ALPHA_K.setFocusable(false);
        ALPHA_K.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_K.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_K.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_K.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_K.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_K);

        ALPHA_L.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_L.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_L.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_L.setText("L");
        ALPHA_L.setFocusable(false);
        ALPHA_L.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_L.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_L.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_L.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_L.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_L);

        ALPHA_M.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_M.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_M.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_M.setText("M");
        ALPHA_M.setFocusable(false);
        ALPHA_M.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_M.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_M.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_M.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_M.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_M);

        ALPHA_N.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_N.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_N.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_N.setText("N");
        ALPHA_N.setFocusable(false);
        ALPHA_N.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_N.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_N.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_N.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_N.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_N);

        ALPHA_FLAG.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_FLAG.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_FLAG.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_FLAG.setText("");
        ALPHA_FLAG.setFocusable(false);
        ALPHA_FLAG.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_FLAG.setMinimumSize(new java.awt.Dimension(25, 20));
        ALPHA_FLAG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALPHA_FLAGActionPerformed(evt);
            }
        });
        ALPHA_FLAG.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_FLAG);

        ALPHA_COMMA.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_COMMA.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_COMMA.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_COMMA.setText(",");
        ALPHA_COMMA.setFocusable(false);
        ALPHA_COMMA.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_COMMA.setMinimumSize(new java.awt.Dimension(25, 20));
        ALPHA_COMMA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_COMMA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_COMMA);

        ALPHA_O.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_O.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_O.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_O.setText("O");
        ALPHA_O.setFocusable(false);
        ALPHA_O.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_O.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_O.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_O.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_O.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_O);

        ALPHA_P.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_P.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_P.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_P.setText("P");
        ALPHA_P.setFocusable(false);
        ALPHA_P.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_P.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_P.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_P.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_P.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_P);

        ALPHA_Q.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_Q.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_Q.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_Q.setText("Q");
        ALPHA_Q.setFocusable(false);
        ALPHA_Q.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_Q.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_Q.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_Q.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_Q.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_Q);

        ALPHA_R.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_R.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_R.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_R.setText("R");
        ALPHA_R.setFocusable(false);
        ALPHA_R.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_R.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_R.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_R.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_R.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_R);

        ALPHA_S.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_S.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_S.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_S.setText("S");
        ALPHA_S.setFocusable(false);
        ALPHA_S.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_S.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_S.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_S.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_S.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_S);

        ALPHA_T.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_T.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_T.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_T.setText("T");
        ALPHA_T.setFocusable(false);
        ALPHA_T.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_T.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_T.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_T.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_T.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_T);

        ALPHA_U.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_U.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_U.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_U.setText("U");
        ALPHA_U.setFocusable(false);
        ALPHA_U.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_U.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_U.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_U.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_U.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_U);

        ALPHA_RETURN.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_RETURN.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_RETURN.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_RETURN.setText("↵");
        ALPHA_RETURN.setFocusable(false);
        ALPHA_RETURN.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_RETURN.setMinimumSize(new java.awt.Dimension(25, 20));
        ALPHA_RETURN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALPHA_RETURNActionPerformed(evt);
            }
        });
        ALPHA_RETURN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_RETURN);

        ALPHA_void.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_void.setMinimumSize(new java.awt.Dimension(20, 20));
        ALPHA_void.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_void.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout ALPHA_voidLayout = new javax.swing.GroupLayout(ALPHA_void);
        ALPHA_void.setLayout(ALPHA_voidLayout);
        ALPHA_voidLayout.setHorizontalGroup(
                ALPHA_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 26, Short.MAX_VALUE)
        );
        ALPHA_voidLayout.setVerticalGroup(
                ALPHA_voidLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 23, Short.MAX_VALUE)
        );

        alpha.add(ALPHA_void);

        ALPHA_V.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_V.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_V.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_V.setText("V");
        ALPHA_V.setFocusable(false);
        ALPHA_V.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_V.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_V.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_V.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_V.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_V);

        ALPHA_W.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_W.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_W.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_W.setText("W");
        ALPHA_W.setFocusable(false);
        ALPHA_W.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_W.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_W.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_W.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_W.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_W);

        ALPHA_X.setBackground(new java.awt.Color(102, 102, 102));
        ALPHA_X.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_X.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_X.setText("X");
        ALPHA_X.setFocusable(false);
        ALPHA_X.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_X.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_X.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_X.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_X.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_X);

        ALPHA_Y.setBackground(new java.awt.Color(102, 102, 102));
        ALPHA_Y.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_Y.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_Y.setText("Y");
        ALPHA_Y.setFocusable(false);
        ALPHA_Y.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_Y.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_Y.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_Y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_Y.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_Y);

        ALPHA_Z.setBackground(new java.awt.Color(102, 102, 102));
        ALPHA_Z.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_Z.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_Z.setText("Z");
        ALPHA_Z.setFocusable(false);
        ALPHA_Z.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_Z.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_Z.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_Z.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendSelfAlpha(evt);
            }
        });
        ALPHA_Z.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_Z);

        ALPHA_SPACE.setBackground(new java.awt.Color(51, 51, 51));
        ALPHA_SPACE.setFont(new java.awt.Font("TI-Nspire Sans", 0, 12)); // NOI18N
        ALPHA_SPACE.setForeground(new java.awt.Color(255, 255, 255));
        ALPHA_SPACE.setText("<html><div style=\"padding-top:7px;\">︺</div></html>");
        ALPHA_SPACE.setActionCommand("<html><div style=\"padding-top:10px;\">└─┘</div></html>");
        ALPHA_SPACE.setFocusable(false);
        ALPHA_SPACE.setMargin(new java.awt.Insets(2, -10, 2, -10));
        ALPHA_SPACE.setMinimumSize(new java.awt.Dimension(15, 15));
        ALPHA_SPACE.setPreferredSize(new java.awt.Dimension(15, 15));
        ALPHA_SPACE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALPHA_SPACEActionPerformed(evt);
            }
        });
        ALPHA_SPACE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                fromKeyPressed(evt);
            }
        });
        alpha.add(ALPHA_SPACE);

        bottom.setBackground(new java.awt.Color(51, 51, 51));
        bottom.setForeground(new java.awt.Color(51, 51, 51));
        bottom.setFocusable(false);
        bottom.setLayout(new java.awt.GridLayout(3, 1));

        options1.setBackground(new java.awt.Color(51, 51, 51));
        options1.setForeground(new java.awt.Color(51, 51, 51));
        options1.setFocusable(false);
        options1.setLayout(new javax.swing.BoxLayout(options1, javax.swing.BoxLayout.LINE_AXIS));

        DevicesRemoteMode.setBackground(new java.awt.Color(51, 51, 51));
        DevicesRemoteMode.setFont(new java.awt.Font("TI-Nspire Sans", 0, 11)); // NOI18N
        DevicesRemoteMode.setForeground(new java.awt.Color(255, 255, 255));
        DevicesRemoteMode.setText("Target devices :   ");
        DevicesRemoteMode.setToolTipText("");
        options1.add(DevicesRemoteMode);

        ALL.setBackground(new java.awt.Color(51, 51, 51));
        device_selectmode_group.add(ALL);
        ALL.setFont(new java.awt.Font("TI-Nspire Sans", 0, 11)); // NOI18N
        ALL.setForeground(new java.awt.Color(255, 255, 255));
        ALL.setSelected(true);
        ALL.setText("All  ");
        ALL.setFocusable(false);
        ALL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ALLActionPerformed(evt);
            }
        });
        options1.add(ALL);

        SELECTION.setBackground(new java.awt.Color(51, 51, 51));
        device_selectmode_group.add(SELECTION);
        SELECTION.setFont(new java.awt.Font("TI-Nspire Sans", 0, 11)); // NOI18N
        SELECTION.setForeground(new java.awt.Color(255, 255, 255));
        SELECTION.setText("");
        SELECTION.setFocusable(false);
        SELECTION.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SELECTIONActionPerformed(evt);
            }
        });
        options1.add(SELECTION);

        filler4.setFocusable(false);
        options1.add(filler4);

        bottom.add(options1);

        options0.setBackground(new java.awt.Color(51, 51, 51));
        options0.setForeground(new java.awt.Color(51, 51, 51));
        options0.setFocusable(false);
        options0.setLayout(new javax.swing.BoxLayout(options0, javax.swing.BoxLayout.LINE_AXIS));

        noScreen.setBackground(new java.awt.Color(51, 51, 51));
        noScreen.setForeground(new java.awt.Color(255, 255, 255));
        noScreen.setText("Disable Screen");
        noScreen.setFocusable(false);
        noScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noScreenActionPerformed(evt);
            }
        });
        options0.add(noScreen);

        filler1.setFocusable(false);
        options0.add(filler1);

        RECORD.setBackground(new java.awt.Color(51, 0, 0));
        RECORD.setFont(new java.awt.Font("TI-Nspire Sans", 0, 11)); // NOI18N
        RECORD.setForeground(new java.awt.Color(255, 255, 255));
        RECORD.setText("<html><span style=\"color:red;font-size: 1.5em;\">●</span> Record</html>");
        RECORD.setActionCommand("Record ");
        RECORD.setFocusable(false);
        RECORD.setMargin(new java.awt.Insets(-5, -10, 0, -10));
        RECORD.setMinimumSize(new java.awt.Dimension(70, 20));
        RECORD.setPreferredSize(new java.awt.Dimension(70, 20));
        RECORD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RECORDActionPerformed(evt);
            }
        });
        options0.add(RECORD);

        STOP.setBackground(new java.awt.Color(0, 0, 0));
        STOP.setFont(new java.awt.Font("TI-Nspire Sans", 0, 11)); // NOI18N
        STOP.setForeground(new java.awt.Color(255, 255, 255));
        STOP.setText("<html><span style=\"font-size: 1.5em;\">∎</span> Stop</html>");
        STOP.setActionCommand("Record ");
        STOP.setFocusable(false);
        STOP.setMargin(new java.awt.Insets(-5, -10, 0, -10));
        STOP.setMinimumSize(new java.awt.Dimension(70, 20));
        STOP.setPreferredSize(new java.awt.Dimension(70, 20));
        STOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STOPActionPerformed(evt);
            }
        });
        options0.add(STOP);

        LOAD.setBackground(new java.awt.Color(0, 25, 0));
        LOAD.setFont(new java.awt.Font("TI-Nspire Sans", 0, 11)); // NOI18N
        LOAD.setForeground(new java.awt.Color(255, 255, 255));
        LOAD.setText("<html><span style=\"color:green;font-size: 1.5em;\">▶</span> Load</html>");
        LOAD.setActionCommand("Record ");
        LOAD.setFocusable(false);
        LOAD.setMargin(new java.awt.Insets(-5, -10, 0, -10));
        LOAD.setMinimumSize(new java.awt.Dimension(70, 20));
        LOAD.setPreferredSize(new java.awt.Dimension(70, 20));
        LOAD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LOADActionPerformed(evt);
            }
        });
        options0.add(LOAD);

        bottom.add(options0);

        tiplanet.setForeground(new java.awt.Color(255, 255, 255));
        tiplanet.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tiplanet.setText("Adriweb, Levak © 2012  -  http://tiplanet.org  -  v1.7");
        tiplanet.setFocusable(false);
        bottom.add(tiplanet);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(digit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(screen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(alpha, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bottom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(top, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(screen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(top, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(digit, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(alpha, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SHIFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SHIFTActionPerformed
        Shift_state = !Shift_state;
        Ctrl_state = false;
    }//GEN-LAST:event_SHIFTActionPerformed

    private void ONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ONActionPerformed
        sendEvent("~home~");
    }//GEN-LAST:event_ONActionPerformed

    private void DOCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DOCActionPerformed
        sendEvent("~ctrl_home~");
    }//GEN-LAST:event_DOCActionPerformed

    private void MENUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MENUActionPerformed
        sendEvent("~menu~");
    }//GEN-LAST:event_MENUActionPerformed

    private void ESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ESCActionPerformed
        sendEvent("~esc~");
    }//GEN-LAST:event_ESCActionPerformed

    private void SCPDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SCPDActionPerformed
        sendEvent("~ctrl_0~");
    }//GEN-LAST:event_SCPDActionPerformed

    private void TABActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TABActionPerformed
        sendEvent("~tab~");
    }//GEN-LAST:event_TABActionPerformed

    private void UPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPActionPerformed
        sendEvent("~up~");
    }//GEN-LAST:event_UPActionPerformed

    private void RIGHTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RIGHTActionPerformed
        sendArrowKey("right");
    }//GEN-LAST:event_RIGHTActionPerformed

    private void DOWNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DOWNActionPerformed
        sendArrowKey("down");
    }//GEN-LAST:event_DOWNActionPerformed

    private void LEFTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LEFTActionPerformed
        sendArrowKey("left");
    }//GEN-LAST:event_LEFTActionPerformed

    private void CLICActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CLICActionPerformed
        sendArrowKey("click");
    }//GEN-LAST:event_CLICActionPerformed

    private void CTRLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CTRLActionPerformed
        Shift_state = false;
        Ctrl_state = !Ctrl_state;
    }//GEN-LAST:event_CTRLActionPerformed

    private void VARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VARActionPerformed
        sendEvent("~var~");
    }//GEN-LAST:event_VARActionPerformed

    private void DELActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELActionPerformed
        sendEvent("~backspace~");
    }//GEN-LAST:event_DELActionPerformed

    private void sendSelf(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSelf
        sendEvent(((javax.swing.JButton) evt.getSource()).getText());
    }//GEN-LAST:event_sendSelf

    private void EXPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EXPActionPerformed
        sendEvent("~e_power_x~");
    }//GEN-LAST:event_EXPActionPerformed

    private void SQUAREActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SQUAREActionPerformed
        sendEvent("~square~");
    }//GEN-LAST:event_SQUAREActionPerformed

    private void TRIGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TRIGActionPerformed
        this.trigFrame.setVisible(true);
        Point p = TRIG.getLocationOnScreen();
        this.trigFrame.setLocation(p.x - 10, p.y - 40);
        RefreshSreen();
    }//GEN-LAST:event_TRIGActionPerformed

    private void POW10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_POW10ActionPerformed
        sendEvent("~10_power_x~");
    }//GEN-LAST:event_POW10ActionPerformed

    private void NUM_NEGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NUM_NEGActionPerformed
        sendEvent("~neg~");
    }//GEN-LAST:event_NUM_NEGActionPerformed

    private void ENTERActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ENTERActionPerformed
        sendEvent("~enter~");
    }//GEN-LAST:event_ENTERActionPerformed

    private void TMPLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TMPLActionPerformed
        sendEvent("~ctrl_*~");
    }//GEN-LAST:event_TMPLActionPerformed

    private void CATActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CATActionPerformed
        sendEvent("~cat~");
    }//GEN-LAST:event_CATActionPerformed

    private void fromKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fromKeyPressed
        int code = evt.getKeyCode();
        //System.out.println(code + " " + evt);
        if (evt.isShiftDown()) {
            Shift_state = true;
        }
        if (evt.isControlDown()) {
            Ctrl_state = true;
        }
        if (code == KeyEvent.VK_ESCAPE) {
            ESCActionPerformed(null);
        } else if (code == KeyEvent.VK_ENTER) {
            ENTERActionPerformed(null);
        } else if (code == KeyEvent.VK_BACK_SPACE) {
            DELActionPerformed(null);
        } else if (code == KeyEvent.VK_LEFT) {
            LEFTActionPerformed(null);
        } else if (code == KeyEvent.VK_RIGHT) {
            RIGHTActionPerformed(null);
        } else if (code == KeyEvent.VK_UP) {
            UPActionPerformed(null);
        } else if (code == KeyEvent.VK_DOWN) {
            DOWNActionPerformed(null);
        } else if (code == KeyEvent.VK_TAB) {
            TABActionPerformed(null);
        } else if (code == KeyEvent.VK_F1) {
            SCPDActionPerformed(null);
        } else if (code == KeyEvent.VK_F2) {
            DOCActionPerformed(null);
        } else if (code == KeyEvent.VK_F3) {
            MENUActionPerformed(null);
        } else if (code == KeyEvent.VK_HOME) {
            ONActionPerformed(null);
        } else if (code == KeyEvent.VK_META) {
            CTRLActionPerformed(null);
        } else {
            //System.out.println(KeyEvent.getKeyText(code));
            if (code != KeyEvent.VK_SHIFT && code != KeyEvent.VK_CONTROL) {
                if (Ctrl_state) {
                    sendEvent(KeyEvent.getKeyText(code).toLowerCase());
                } else {
                    sendEvent(Character.toString(evt.getKeyChar()));
                }
            }
        }
    }//GEN-LAST:event_fromKeyPressed

    private void ALPHA_RETURNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALPHA_RETURNActionPerformed
        sendEvent("~newline~");
    }//GEN-LAST:event_ALPHA_RETURNActionPerformed

    private void ALPHA_FLAGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALPHA_FLAGActionPerformed
        sendEvent("~flag~");
    }//GEN-LAST:event_ALPHA_FLAGActionPerformed

    private void ALPHA_EEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALPHA_EEActionPerformed
        sendEvent("~ee~");
    }//GEN-LAST:event_ALPHA_EEActionPerformed

    private void sendSelfAlpha(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendSelfAlpha
        sendEvent(((javax.swing.JButton) evt.getSource()).getText().toLowerCase());
    }//GEN-LAST:event_sendSelfAlpha

    private void ALPHA_SPACEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALPHA_SPACEActionPerformed
        sendEvent(" ");
    }//GEN-LAST:event_ALPHA_SPACEActionPerformed

    private void ALPHA_PIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALPHA_PIActionPerformed
        this.piFrame.setVisible(true);
        Point p = ALPHA_PI.getLocationOnScreen();
        this.piFrame.setLocation(p.x - 10, p.y - 40);
        RefreshSreen();
    }//GEN-LAST:event_ALPHA_PIActionPerformed

    private void ALPHA_HELPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALPHA_HELPActionPerformed
        this.symbolsFrame.setVisible(true);
        Point p = ALPHA_HELP.getLocationOnScreen();
        this.symbolsFrame.setLocation(p.x - 10, p.y - 40);
        RefreshSreen();
    }//GEN-LAST:event_ALPHA_HELPActionPerformed

    private void MULTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MULTActionPerformed
        sendEvent("*");
    }//GEN-LAST:event_MULTActionPerformed

    private void DIVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DIVActionPerformed
        sendEvent("/");
    }//GEN-LAST:event_DIVActionPerformed

    private void RECORDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RECORDActionPerformed
        System.out.println("Sequence recording started");
        RECORD.setVisible(false);
        STOP.setVisible(true);
        isRecording = true;
    }//GEN-LAST:event_RECORDActionPerformed

    private void STOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STOPActionPerformed
        currentSequence = currentSequence.replace(String.format("%s%s", System.getProperty("line.separator"), System.getProperty("line.separator")), String.format("%s", System.getProperty("line.separator")));
        if (currentSequence.length() > 2) {
            BufferedWriter oFile = null;
            try {

                String sequenceName = (String) JOptionPane.showInputDialog(
                        null,
                        "Sequence Name ?",
                        "nRemote Sequence Saving",
                        1);
                if ((sequenceName != null) && (sequenceName.length() > 0)) {
                    sequenceName = sequenceName.trim();
                } else {
                    sequenceName = "nRemoteSequence-" + (Calendar.getInstance().getTime().toString()).substring(0, 19).replace(" ", "_").replace(":", "-").trim();
                }

                oFile = new BufferedWriter(new OutputStreamWriter(
                        new FileOutputStream(sequenceName + ".txt"), "UTF-8"));
            } catch (Exception e) {
                System.out.println(e.getMessage());
            }

            //System.out.println(currentSequence);
            try {
                oFile.write(currentSequence);
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
            try {
                oFile.close();
            } catch (IOException e) {
                System.out.println(e.getMessage());
            }
            System.out.println("Sequence recording finished. File saved.");
        }
        System.out.println("Sequence recording stopped");
        currentSequence = "";
        isRecording = false;

        RECORD.setVisible(true);
        STOP.setVisible(false);
    }//GEN-LAST:event_STOPActionPerformed

    private void LOADActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LOADActionPerformed
        JFileChooser fd = new JFileChooser(".");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Sequence (text) files", "txt");
        fd.setFileFilter(filter);
        int returnVal = fd.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String fileName = fd.getSelectedFile().getPath();
            BufferedReader br = null;
            try {
                br = new BufferedReader(new FileReader(fileName));
            } catch (FileNotFoundException e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }

            LineNumberReader lnr = null;
            try {
                lnr = new LineNumberReader(new FileReader(fileName));
            } catch (FileNotFoundException e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }
            try {
                lnr.skip(Long.MAX_VALUE);
            } catch (IOException e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }
            int nbr = lnr.getLineNumber();

            if (nbr > 50) {
                JDialog.setDefaultLookAndFeelDecorated(true);
                int response = JOptionPane.showConfirmDialog(null, "This file has " + nbr + " instructions. Are you sure you want to continue ?", "nRemote - Sequence Launcher",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (response == JOptionPane.NO_OPTION) {
                    return;
                } else if (response == JOptionPane.YES_OPTION) {
                    System.out.println("Sequenced inited");
                } else if (response == JOptionPane.CLOSED_OPTION) {
                    return;
                }
            }

            String line;
            try {
                while ((line = br.readLine()) != null) {
                    Thread.sleep(20L);
                    if (line.startsWith("~")) {
                        Remote.sendEvent(line);
                    } else {
                        Remote.sendString(line);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            }
        }
    }//GEN-LAST:event_LOADActionPerformed

    private void noScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noScreenActionPerformed
        if (!noScreen.isSelected()) {
            setSize(new Dimension(getWidth(), getHeight()));
            screenFrame.setVisible(true);
        } else {
            setSize(new Dimension(getWidth(), getHeight() - SCREENlastheight));
            screenFrame.setVisible(false);
        }
    }//GEN-LAST:event_noScreenActionPerformed

    private void EQUALActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EQUALActionPerformed
        if (Ctrl_state) {
            this.conditionFrame.setVisible(true);
            Point p = EQUAL.getLocationOnScreen();
            this.conditionFrame.setLocation(p.x - 10, p.y - 40);
            RefreshSreen();
        } else {
            sendEvent("=");
        }
    }//GEN-LAST:event_EQUALActionPerformed

    private void SELECTIONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SELECTIONActionPerformed
        this.deviceSelectionFrame.setVisible(true);
    }//GEN-LAST:event_SELECTIONActionPerformed

    private void ALLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ALLActionPerformed
        this.deviceSelectionFrame.setVisible(false);
    }//GEN-LAST:event_ALLActionPerformed

    private void sendArrowKey(String keyStr) {
        if (Shift_state == true) {
            keyStr = "hold_" + keyStr;
        }
        sendEvent("~" + keyStr + "~");
    }

    private void sendEvent(String keyStr) {
        try {
            if (Ctrl_state == true) {
                if (keyStr.charAt(0) == '~') {
                    keyStr = keyStr.replace("~", "");
                }
                keyStr = "~ctrl_" + keyStr + "~";
                Ctrl_state = false;
            } else if (Shift_state == true) {
                if (keyStr.charAt(0) == '~') {
                    keyStr = "~shift_" + keyStr.replace("~", "") + "~";
                } else {
                    keyStr = keyStr.toUpperCase();
                }
                Shift_state = false;
            }
            //System.out.println(keyStr);
            if (ALL.isSelected()) {
                Remote.sendEvent(keyStr);
            } else {
                for (INodeID nodeID : this.getSelectedDevices()) {
                    Remote.sendEvent(keyStr, nodeID);
                }
            }
        } catch (Exception e) {
        }

        if (isRecording == true) {
            if (keyStr.charAt(0) == '~') {
                currentSequence = String.format("%s%s%s%s", currentSequence, System.getProperty("line.separator"), keyStr, System.getProperty("line.separator"));
            } else {
                currentSequence = String.format("%s%s", currentSequence, keyStr);
            }
        }
        RefreshSreen();
    }

    public INodeID[] getSelectedDevices() {
        return this.deviceSelectionFrame.getSelectedItems();
    }

    public int getNumberSelectedDevices() {
        INodeID[] nodes = getSelectedDevices();
        if (nodes == null) {
            return 0;
        }
        return nodes.length;
    }

    public void updateFields() {
        int number = Remote.getNumberOfDevices();
        if (number > 0) {
            this.setTitle("nRemote - " + number + " device" + (number > 1 ? "s" : "") + " connected");
        } else {
            this.setTitle("nRemote - No device connected");
        }
        this.SELECTION.setText("Selection (" + getNumberSelectedDevices() + "/" + number + ")");
    }

    public void RefreshSreen() {
        ImageIcon icn = null;
        if (Remote.getNumberOfDevices() > 0) {
            if (!this.noScreen.isSelected()) {
                try {
                    if (ALL.isSelected()) {
                        icn = new ImageIcon(Remote.getScreen(Remote.theCalcs[0]));
                    } else {
                        INodeID[] tbl = getSelectedDevices();
                        BufferedImage img = null;
                        if (tbl != null && tbl.length > 0) {
                            img = Remote.getScreen(tbl[0]);
                        }
                        if (img != null) {
                            icn = new ImageIcon(img);
                        } else {
                            icn = new ImageIcon(Screen.generateErrorScreen("SELECT A DEVICE !"));
                        }
                    }
                } catch (Exception ignored) {
                }
            }
        } else {
            icn = new ImageIcon(Screen.generateErrorScreen("CONNECT A DEVICE !"));
        }

        if (icn != null) {
            this.screenFrame.setScreenImage(icn);
            //setVisible(true);
            //this.toFront();
            icn = scale(icn.getImage(), this.getWidth() / 335f);
            screen.setSize(getWidth(), icn.getIconHeight());
            SCREEN.setSize(icn.getIconWidth(), icn.getIconHeight());
            SCREENlastheight = SCREEN.getHeight();
        }

        SCREEN.setIcon(icn);
    }

    private ImageIcon scale(Image src, float scale) {
        int w = (int) (scale * src.getWidth(this));
        int h = (int) (scale * src.getHeight(this));
        int type = BufferedImage.TYPE_INT_RGB;
        BufferedImage dst = new BufferedImage(w, h, type);
        Graphics2D g2 = dst.createGraphics();
        g2.drawImage(src, 0, 0, w, h, this);
        g2.dispose();
        return new ImageIcon(dst);
    }

    public void updateDeviceList() {
        try {
            Remote.connect();
        } catch (Exception e) {
        }
        ;
        if (Remote.theCalcs == null) {
            return;
        }
        this.deviceSelectionFrame.updateItems();
    }

    // <editor-fold defaultstate="collapsed" desc="Variables declaration - do not modify">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton ALL;
    private javax.swing.JButton ALPHA_A;
    private javax.swing.JButton ALPHA_B;
    private javax.swing.JButton ALPHA_C;
    private javax.swing.JButton ALPHA_COMMA;
    private javax.swing.JButton ALPHA_D;
    private javax.swing.JButton ALPHA_E;
    private javax.swing.JButton ALPHA_EE;
    private javax.swing.JButton ALPHA_F;
    private javax.swing.JButton ALPHA_FLAG;
    private javax.swing.JButton ALPHA_G;
    private javax.swing.JButton ALPHA_H;
    private javax.swing.JButton ALPHA_HELP;
    private javax.swing.JButton ALPHA_I;
    private javax.swing.JButton ALPHA_J;
    private javax.swing.JButton ALPHA_K;
    private javax.swing.JButton ALPHA_L;
    private javax.swing.JButton ALPHA_M;
    private javax.swing.JButton ALPHA_N;
    private javax.swing.JButton ALPHA_O;
    private javax.swing.JButton ALPHA_P;
    private javax.swing.JButton ALPHA_PI;
    private javax.swing.JButton ALPHA_Q;
    private javax.swing.JButton ALPHA_R;
    private javax.swing.JButton ALPHA_RETURN;
    private javax.swing.JButton ALPHA_S;
    private javax.swing.JButton ALPHA_SPACE;
    private javax.swing.JButton ALPHA_T;
    private javax.swing.JButton ALPHA_U;
    private javax.swing.JButton ALPHA_V;
    private javax.swing.JButton ALPHA_W;
    private javax.swing.JButton ALPHA_X;
    private javax.swing.JButton ALPHA_Y;
    private javax.swing.JButton ALPHA_Z;
    private javax.swing.JPanel ALPHA_void;
    private javax.swing.JButton CAT;
    private javax.swing.JButton CLIC;
    private javax.swing.JButton CLOSE_P;
    private javax.swing.JButton CTRL;
    private javax.swing.JButton DEL;
    private javax.swing.JButton DIV;
    private javax.swing.JButton DOC;
    private javax.swing.JButton DOWN;
    private javax.swing.JLabel DevicesRemoteMode;
    private javax.swing.JButton ENTER;
    private javax.swing.JButton EQUAL;
    private javax.swing.JButton ESC;
    private javax.swing.JButton EXP;
    private javax.swing.JButton LEFT;
    private javax.swing.JButton LOAD;
    private javax.swing.JButton MENU;
    private javax.swing.JButton MINUS;
    private javax.swing.JButton MULT;
    private javax.swing.JPanel Middle;
    private javax.swing.JButton NUM0;
    private javax.swing.JButton NUM1;
    private javax.swing.JButton NUM2;
    private javax.swing.JButton NUM3;
    private javax.swing.JButton NUM4;
    private javax.swing.JButton NUM5;
    private javax.swing.JButton NUM6;
    private javax.swing.JButton NUM7;
    private javax.swing.JButton NUM8;
    private javax.swing.JButton NUM9;
    private javax.swing.JButton NUM_NEG;
    private javax.swing.JButton NUM_POINT;
    private javax.swing.JButton ON;
    private javax.swing.JButton OPEN_P;
    private javax.swing.JButton PLUS;
    private javax.swing.JButton POW;
    private javax.swing.JButton POW10;
    private javax.swing.JButton RECORD;
    private javax.swing.JButton RIGHT;
    private javax.swing.JButton SCPD;
    private javax.swing.JLabel SCREEN;
    private javax.swing.JRadioButton SELECTION;
    private javax.swing.JButton SHIFT;
    private javax.swing.JButton SQUARE;
    private javax.swing.JButton STOP;
    private javax.swing.JButton TAB;
    private javax.swing.JButton TMPL;
    private javax.swing.JButton TRIG;
    private javax.swing.JButton UP;
    private javax.swing.JButton VAR;
    private javax.swing.JPanel alpha;
    private javax.swing.JPanel bottom;
    private javax.swing.JPanel ctrl;
    private javax.swing.JPanel del;
    private javax.swing.ButtonGroup device_selectmode_group;
    private javax.swing.JPanel digit;
    private javax.swing.JPanel equal_trig;
    private javax.swing.JPanel exp_10pow;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3_void;
    private javax.swing.JPanel jPanel4_void;
    private javax.swing.JPanel jPanel5_void;
    private javax.swing.JPanel jPanel6_void;
    private javax.swing.JPanel jPanel7_void;
    private javax.swing.JPanel jPanel8_void;
    private javax.swing.JPanel left;
    private javax.swing.JPanel left_side;
    private javax.swing.JPanel middle_side;
    private javax.swing.JPanel mult_div;
    private javax.swing.JCheckBox noScreen;
    private javax.swing.JPanel options0;
    private javax.swing.JPanel options1;
    private javax.swing.JPanel parenthesis;
    private javax.swing.JPanel plus_minus;
    private javax.swing.JPanel pow_square;
    private javax.swing.JPanel right;
    private javax.swing.JPanel right_side;
    private javax.swing.JPanel screen;
    private javax.swing.JLabel tiplanet;
    private javax.swing.JPanel tmpt_cat;
    private javax.swing.JPanel top;
    private javax.swing.JPanel top_left;
    private javax.swing.JPanel top_right;
    private int SCREENlastheight = 240;
    // End of variables declaration//GEN-END:variables
// </editor-fold>
}
